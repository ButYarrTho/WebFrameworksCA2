@using MySql.Data.MySqlClient
<h4>Movies</h4>
<button @onclick="DownloadMovies">Download Popular Movies</button>
<input @bind="movieSearchQuery" placeholder="Search Movies" />
<button @onclick="SearchMovies">Search</button>

@if (isLoading)
{
<p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
<p style="color: red;">@errorMessage</p>
}
else if (isSearchMode && searchResults != null)
{
<h5>Search Results:</h5>
<ol>
    @foreach (var movie in searchResults.Results)
    {
    <li>
        <strong>@movie.Title</strong>
        <p>
            Overview: @movie.Overview
            <br />
            <a href="https://www.themoviedb.org/movie/@movie.Id" target="_blank">View on TMDb</a>
        </p>
        <button @onclick="() => OnMovieButtonClicked(movie.Title)">Action</button>
    </li>
    }
</ol>
}
else if (topmovies != null)
{
<h5>Popular Movies:</h5>
<ol>
    @foreach (var movie in topmovies.Results)
    {
    <li>
        <strong>@movie.Title</strong>
        <p>
            Overview: @movie.Overview
            <br />
            <a href="https://www.themoviedb.org/movie/@movie.Id" target="_blank">View on TMDb</a>
        </p>
        <button @onclick="() => OnMovieButtonClicked(movie.Title)">Action</button>
    </li>
    }
</ol>
}

@code {
private Movies? topmovies;
private Movies? searchResults;
private bool isLoading = false;
private bool isSearchMode = false;
private string? errorMessage;
private string movieSearchQuery = string.Empty;

private void DownloadMovies()
{
isLoading = true;
errorMessage = null;
isSearchMode = false;

try
{
topmovies = MusicService.GetPopularMovies();
}
catch (Exception ex)
{
errorMessage = "Failed to fetch movies. Please try again.";
Console.WriteLine($"Error: {ex.Message}");
}
finally
{
isLoading = false;
}
}

private void SearchMovies()
{
if (string.IsNullOrWhiteSpace(movieSearchQuery))
{
errorMessage = "Search query cannot be empty.";
return;
}

isLoading = true;
errorMessage = null;
isSearchMode = true;

try
{
searchResults = MusicService.SearchMovies(movieSearchQuery);
}
catch (Exception ex)
{
errorMessage = "Failed to search for movies. Please try again.";
Console.WriteLine($"Error: {ex.Message}");
}
finally
{
isLoading = false;
}
}



private void OnMovieButtonClicked(string movieTitle)
{
    var connectionString = "Server=b4wrtzahdokrnwkdisvz-mysql.services.clever-cloud.com;Database=b4wrtzahdokrnwkdisvz;User=u404013ijbde7adc;Password=VCdtkloWCwNiL29KUOL3;Port=3306;";

    try
    {
        // connect to database
        using var connection = new MySqlConnection(connectionString);
        connection.Open();

        // SQL query to put movie title into db
        var insertQuery = @"
                INSERT IGNORE INTO Movies (Title) 
                VALUES (@Title);";

        using var insertCommand = new MySqlCommand(insertQuery, connection);

        // associate movie title with the query
        insertCommand.Parameters.AddWithValue("@Title", movieTitle);
        
        // this pushes the query
        int rowsAffected = insertCommand.ExecuteNonQuery();

        if (rowsAffected > 0)
        {
            Console.WriteLine($"Added new movie: {movieTitle}");
        }
        else
        {
            Console.WriteLine($"Movie already exists: {movieTitle}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error adding movie to the database: {movieTitle}. Error: {ex.Message}");
    }
}
}
